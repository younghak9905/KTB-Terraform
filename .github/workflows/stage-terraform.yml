# terraform.yaml
name: 'Terraform'

on:
  push:
    branches:
      - 'feat/*'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '**/stage-terraform.yml'
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirm if you want to destroy the Terraform backend (type DESTROY to confirm)'
        required: true
        default: 'DESTROY'

env:
  AWS_REGION: us-east-2   # set this to your preferred AWS region


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: stage
    env:
      CURRENT_ENV: stage  #${{ env.CURRENT_ENV }}를 사용하면 됩니다.
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_DEV_ZERO9905_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_DEV_ZERO9905_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash

          # 함수 정의: S3 버킷 존재 여부 확인
          check_bucket_exists() {
              BUCKET_NAME="$1"
              output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
              if echo "$output" | grep -q 'NoSuchBucket'; then
                  echo "false"
              elif echo "$output" | grep -q 'Access Denied'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          # 함수 정의: DynamoDB 테이블 존재 여부 확인
          check_dynamodb_exists() {
              TABLE_NAME="$1"
              output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
              if echo "$output" | grep -q 'ResourceNotFoundException'; then
                  echo "false"
              elif echo "$output" | grep -q 'AccessDeniedException'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          # Terraform 상태 관리를 위한 S3 버킷과 DynamoDB 테이블 이름 (백엔드와 일치)
          S3_BUCKET="zero9905-terraformstate"
          DYNAMODB_TABLE="zero9905-terraformstate"

          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

          if [ -d backend ]; then
              cd backend
          else
              echo "Backend directory does not exist. Exiting..."
              exit 1
          fi

          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "Access denied when checking resources. Please check your AWS credentials and permissions."
              exit 1
          else
              echo "Initializing Terraform because one or more resources do not exist."
              terraform init -reconfigure
              terraform plan
              terraform apply -auto-approve
          fi

      # 추가: 이미 존재하는 IAM 리소스를 Terraform state에 import
      

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform_stage
          terraform init -reconfigure
          terraform plan -out=tfplan -input=false

      - name: Terraform Import IAM Resources
        run: |
          cd terraform_stage
          terraform import module.iam_service_role.aws_iam_role.ec2-iam-role aws-iam-${{ env.CURRENT_ENV }}-terraform_zero9905-ec2-role || true
          terraform import module.iam_service_role.aws_iam_instance_profile.ec2-iam-role-profile aws-iam-${{ env.CURRENT_ENV }}-terraform_zero9905-ec2-role-profile || true

      - name: Terraform Apply
        run: |
          cd terraform_stage
          terraform apply -parallelism=10 -auto-approve tfplan

  backend_setup:
    runs-on: ubuntu-latest
    env:
      CURRENT_ENV: stage
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Backend Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_DEV_ZERO9905_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_DEV_ZERO9905_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform init -reconfigure\
            -backend-config="region=us-east-2" \
            -backend-config="bucket=zero9905-terraformstate" \
            -backend-config="key=${{ env.CURRENT_ENV }}/terraform/terraform.tfstate" \
            -backend-config="dynamodb_table=zero9905-terraformstate"

  backend_destroy:
    runs-on: ubuntu-latest
    env:
      CURRENT_ENV: stage
    needs: backend_setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Confirm Destruction
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        run: |
          echo "Destruction confirmed. Proceeding with Terraform destroy operation."

      - name: Terraform Init for Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_DEV_ZERO9905_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_DEV_ZERO9905_AWS_SECRET_ACCESS_KEY }}
        run: |
           cd terraform_stage; terraform init -reconfigure\
            -backend-config="region=us-east-2" \
            -backend-config="bucket=zero9905-terraformstate" \
            -backend-config="key=${{ env.CURRENT_ENV }}/terraform/terraform.tfstate" \
            -backend-config="dynamodb_table=zero9905-terraformstate"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_DEV_ZERO9905_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_DEV_ZERO9905_AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform destroy -parallelism=10 -auto-approve tfplan

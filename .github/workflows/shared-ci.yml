name: 'Shared Infrastructure CI/CD'

on:
  push:
    branches:
      - 'main'
      - 'feature/*'
    paths:
      - 'shared/**'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'shared/**'
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Ïù∏ÌîÑÎùº ÏÇ≠Ï†ú ÌôïÏù∏ (DESTROY ÏûÖÎ†•Ïãú ÏÇ≠Ï†ú)'
        required: false
        default: ''

env:
  AWS_REGION: us-east-2
  TERRAFORM_DIR: ./shared

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: shared
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TERRAFORM_DIR }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_SHARED_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_SHARED_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        
      - name: Terraform Init
        id: init
        run: |
          terraform init -reconfigure \
            -backend-config="region=us-east-2" \
            -backend-config="bucket=zero9905-terraformstate" \
            -backend-config="key=shared/terraform/terraform.tfstate" \
            -backend-config="dynamodb_table=zero9905-terraformstate" \
            -lock-timeout=300s

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.confirm_destroy != 'DESTROY'
        run: terraform plan -input=false -parallelism=10
        continue-on-error: true

      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && github.event.inputs.confirm_destroy != 'DESTROY'
        run: terraform apply -auto-approve -parallelism=10
        
      - name: Terraform Destroy
        if: github.event.inputs.confirm_destroy == 'DESTROY'
        run: terraform destroy -auto-approve